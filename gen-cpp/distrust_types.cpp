/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "distrust_types.h"

#include <algorithm>

namespace distrust {

const char* ModelInfo::ascii_fingerprint = "DB2CF0470155E4641638FF4CB4C715EE";
const uint8_t ModelInfo::binary_fingerprint[16] = {0xDB,0x2C,0xF0,0x47,0x01,0x55,0xE4,0x64,0x16,0x38,0xFF,0x4C,0xB4,0xC7,0x15,0xEE};

uint32_t ModelInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->window_size);
          this->__isset.window_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->wordvec_dim);
          this->__isset.wordvec_dim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hidden_dim);
          this->__isset.hidden_dim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->start_token_index);
          this->__isset.start_token_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->end_token_index);
          this->__isset.end_token_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unk_token_index);
          this->__isset.unk_token_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vocab.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->vocab.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->vocab[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vocab = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ModelInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ModelInfo");

  xfer += oprot->writeFieldBegin("window_size", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->window_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wordvec_dim", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->wordvec_dim);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hidden_dim", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->hidden_dim);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_token_index", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->start_token_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("end_token_index", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->end_token_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unk_token_index", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->unk_token_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vocab", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->vocab.size()));
    std::vector<std::string> ::const_iterator _iter5;
    for (_iter5 = this->vocab.begin(); _iter5 != this->vocab.end(); ++_iter5)
    {
      xfer += oprot->writeString((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ModelInfo &a, ModelInfo &b) {
  using ::std::swap;
  swap(a.window_size, b.window_size);
  swap(a.wordvec_dim, b.wordvec_dim);
  swap(a.hidden_dim, b.hidden_dim);
  swap(a.start_token_index, b.start_token_index);
  swap(a.end_token_index, b.end_token_index);
  swap(a.unk_token_index, b.unk_token_index);
  swap(a.vocab, b.vocab);
  swap(a.__isset, b.__isset);
}

const char* Params::ascii_fingerprint = "3EA3FAC2464C28F7A32E48AAB85D2BDB";
const uint8_t Params::binary_fingerprint[16] = {0x3E,0xA3,0xFA,0xC2,0x46,0x4C,0x28,0xF7,0xA3,0x2E,0x48,0xAA,0xB8,0x5D,0x2B,0xDB};

uint32_t Params::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->wordvec_w.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->wordvec_w.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              {
                this->wordvec_w[_i10].clear();
                uint32_t _size11;
                ::apache::thrift::protocol::TType _etype14;
                xfer += iprot->readListBegin(_etype14, _size11);
                this->wordvec_w[_i10].resize(_size11);
                uint32_t _i15;
                for (_i15 = 0; _i15 < _size11; ++_i15)
                {
                  xfer += iprot->readDouble(this->wordvec_w[_i10][_i15]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.wordvec_w = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->input_hidden_w.clear();
            uint32_t _size16;
            ::apache::thrift::protocol::TType _etype19;
            xfer += iprot->readListBegin(_etype19, _size16);
            this->input_hidden_w.resize(_size16);
            uint32_t _i20;
            for (_i20 = 0; _i20 < _size16; ++_i20)
            {
              {
                this->input_hidden_w[_i20].clear();
                uint32_t _size21;
                ::apache::thrift::protocol::TType _etype24;
                xfer += iprot->readListBegin(_etype24, _size21);
                this->input_hidden_w[_i20].resize(_size21);
                uint32_t _i25;
                for (_i25 = 0; _i25 < _size21; ++_i25)
                {
                  xfer += iprot->readDouble(this->input_hidden_w[_i20][_i25]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.input_hidden_w = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->input_hidden_b.clear();
            uint32_t _size26;
            ::apache::thrift::protocol::TType _etype29;
            xfer += iprot->readListBegin(_etype29, _size26);
            this->input_hidden_b.resize(_size26);
            uint32_t _i30;
            for (_i30 = 0; _i30 < _size26; ++_i30)
            {
              xfer += iprot->readDouble(this->input_hidden_b[_i30]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.input_hidden_b = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->hidden_output_w.clear();
            uint32_t _size31;
            ::apache::thrift::protocol::TType _etype34;
            xfer += iprot->readListBegin(_etype34, _size31);
            this->hidden_output_w.resize(_size31);
            uint32_t _i35;
            for (_i35 = 0; _i35 < _size31; ++_i35)
            {
              xfer += iprot->readDouble(this->hidden_output_w[_i35]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.hidden_output_w = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->hidden_output_b.clear();
            uint32_t _size36;
            ::apache::thrift::protocol::TType _etype39;
            xfer += iprot->readListBegin(_etype39, _size36);
            this->hidden_output_b.resize(_size36);
            uint32_t _i40;
            for (_i40 = 0; _i40 < _size36; ++_i40)
            {
              xfer += iprot->readDouble(this->hidden_output_b[_i40]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.hidden_output_b = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Params::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Params");

  xfer += oprot->writeFieldBegin("wordvec_w", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->wordvec_w.size()));
    std::vector<std::vector<double> > ::const_iterator _iter41;
    for (_iter41 = this->wordvec_w.begin(); _iter41 != this->wordvec_w.end(); ++_iter41)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>((*_iter41).size()));
        std::vector<double> ::const_iterator _iter42;
        for (_iter42 = (*_iter41).begin(); _iter42 != (*_iter41).end(); ++_iter42)
        {
          xfer += oprot->writeDouble((*_iter42));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("input_hidden_w", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->input_hidden_w.size()));
    std::vector<std::vector<double> > ::const_iterator _iter43;
    for (_iter43 = this->input_hidden_w.begin(); _iter43 != this->input_hidden_w.end(); ++_iter43)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>((*_iter43).size()));
        std::vector<double> ::const_iterator _iter44;
        for (_iter44 = (*_iter43).begin(); _iter44 != (*_iter43).end(); ++_iter44)
        {
          xfer += oprot->writeDouble((*_iter44));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("input_hidden_b", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->input_hidden_b.size()));
    std::vector<double> ::const_iterator _iter45;
    for (_iter45 = this->input_hidden_b.begin(); _iter45 != this->input_hidden_b.end(); ++_iter45)
    {
      xfer += oprot->writeDouble((*_iter45));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hidden_output_w", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->hidden_output_w.size()));
    std::vector<double> ::const_iterator _iter46;
    for (_iter46 = this->hidden_output_w.begin(); _iter46 != this->hidden_output_w.end(); ++_iter46)
    {
      xfer += oprot->writeDouble((*_iter46));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hidden_output_b", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->hidden_output_b.size()));
    std::vector<double> ::const_iterator _iter47;
    for (_iter47 = this->hidden_output_b.begin(); _iter47 != this->hidden_output_b.end(); ++_iter47)
    {
      xfer += oprot->writeDouble((*_iter47));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Params &a, Params &b) {
  using ::std::swap;
  swap(a.wordvec_w, b.wordvec_w);
  swap(a.input_hidden_w, b.input_hidden_w);
  swap(a.input_hidden_b, b.input_hidden_b);
  swap(a.hidden_output_w, b.hidden_output_w);
  swap(a.hidden_output_b, b.hidden_output_b);
  swap(a.__isset, b.__isset);
}

const char* ParamUpdate::ascii_fingerprint = "63313E5EA4BE3F473AF76769976DB887";
const uint8_t ParamUpdate::binary_fingerprint[16] = {0x63,0x31,0x3E,0x5E,0xA4,0xBE,0x3F,0x47,0x3A,0xF7,0x67,0x69,0x97,0x6D,0xB8,0x87};

uint32_t ParamUpdate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->wordvec_w.clear();
            uint32_t _size48;
            ::apache::thrift::protocol::TType _ktype49;
            ::apache::thrift::protocol::TType _vtype50;
            xfer += iprot->readMapBegin(_ktype49, _vtype50, _size48);
            uint32_t _i52;
            for (_i52 = 0; _i52 < _size48; ++_i52)
            {
              int32_t _key53;
              xfer += iprot->readI32(_key53);
              std::vector<double> & _val54 = this->wordvec_w[_key53];
              {
                _val54.clear();
                uint32_t _size55;
                ::apache::thrift::protocol::TType _etype58;
                xfer += iprot->readListBegin(_etype58, _size55);
                _val54.resize(_size55);
                uint32_t _i59;
                for (_i59 = 0; _i59 < _size55; ++_i59)
                {
                  xfer += iprot->readDouble(_val54[_i59]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.wordvec_w = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->input_hidden_w.clear();
            uint32_t _size60;
            ::apache::thrift::protocol::TType _etype63;
            xfer += iprot->readListBegin(_etype63, _size60);
            this->input_hidden_w.resize(_size60);
            uint32_t _i64;
            for (_i64 = 0; _i64 < _size60; ++_i64)
            {
              {
                this->input_hidden_w[_i64].clear();
                uint32_t _size65;
                ::apache::thrift::protocol::TType _etype68;
                xfer += iprot->readListBegin(_etype68, _size65);
                this->input_hidden_w[_i64].resize(_size65);
                uint32_t _i69;
                for (_i69 = 0; _i69 < _size65; ++_i69)
                {
                  xfer += iprot->readDouble(this->input_hidden_w[_i64][_i69]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.input_hidden_w = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->input_hidden_b.clear();
            uint32_t _size70;
            ::apache::thrift::protocol::TType _etype73;
            xfer += iprot->readListBegin(_etype73, _size70);
            this->input_hidden_b.resize(_size70);
            uint32_t _i74;
            for (_i74 = 0; _i74 < _size70; ++_i74)
            {
              xfer += iprot->readDouble(this->input_hidden_b[_i74]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.input_hidden_b = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->hidden_output_w.clear();
            uint32_t _size75;
            ::apache::thrift::protocol::TType _etype78;
            xfer += iprot->readListBegin(_etype78, _size75);
            this->hidden_output_w.resize(_size75);
            uint32_t _i79;
            for (_i79 = 0; _i79 < _size75; ++_i79)
            {
              xfer += iprot->readDouble(this->hidden_output_w[_i79]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.hidden_output_w = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->hidden_output_b.clear();
            uint32_t _size80;
            ::apache::thrift::protocol::TType _etype83;
            xfer += iprot->readListBegin(_etype83, _size80);
            this->hidden_output_b.resize(_size80);
            uint32_t _i84;
            for (_i84 = 0; _i84 < _size80; ++_i84)
            {
              xfer += iprot->readDouble(this->hidden_output_b[_i84]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.hidden_output_b = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ParamUpdate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ParamUpdate");

  xfer += oprot->writeFieldBegin("wordvec_w", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->wordvec_w.size()));
    std::map<int32_t, std::vector<double> > ::const_iterator _iter85;
    for (_iter85 = this->wordvec_w.begin(); _iter85 != this->wordvec_w.end(); ++_iter85)
    {
      xfer += oprot->writeI32(_iter85->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(_iter85->second.size()));
        std::vector<double> ::const_iterator _iter86;
        for (_iter86 = _iter85->second.begin(); _iter86 != _iter85->second.end(); ++_iter86)
        {
          xfer += oprot->writeDouble((*_iter86));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("input_hidden_w", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->input_hidden_w.size()));
    std::vector<std::vector<double> > ::const_iterator _iter87;
    for (_iter87 = this->input_hidden_w.begin(); _iter87 != this->input_hidden_w.end(); ++_iter87)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>((*_iter87).size()));
        std::vector<double> ::const_iterator _iter88;
        for (_iter88 = (*_iter87).begin(); _iter88 != (*_iter87).end(); ++_iter88)
        {
          xfer += oprot->writeDouble((*_iter88));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("input_hidden_b", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->input_hidden_b.size()));
    std::vector<double> ::const_iterator _iter89;
    for (_iter89 = this->input_hidden_b.begin(); _iter89 != this->input_hidden_b.end(); ++_iter89)
    {
      xfer += oprot->writeDouble((*_iter89));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hidden_output_w", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->hidden_output_w.size()));
    std::vector<double> ::const_iterator _iter90;
    for (_iter90 = this->hidden_output_w.begin(); _iter90 != this->hidden_output_w.end(); ++_iter90)
    {
      xfer += oprot->writeDouble((*_iter90));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hidden_output_b", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->hidden_output_b.size()));
    std::vector<double> ::const_iterator _iter91;
    for (_iter91 = this->hidden_output_b.begin(); _iter91 != this->hidden_output_b.end(); ++_iter91)
    {
      xfer += oprot->writeDouble((*_iter91));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ParamUpdate &a, ParamUpdate &b) {
  using ::std::swap;
  swap(a.wordvec_w, b.wordvec_w);
  swap(a.input_hidden_w, b.input_hidden_w);
  swap(a.input_hidden_b, b.input_hidden_b);
  swap(a.hidden_output_w, b.hidden_output_w);
  swap(a.hidden_output_b, b.hidden_output_b);
  swap(a.__isset, b.__isset);
}

const char* AnnounceResponse::ascii_fingerprint = "4CDD03BA703CF1CB9385436F27ACC82A";
const uint8_t AnnounceResponse::binary_fingerprint[16] = {0x4C,0xDD,0x03,0xBA,0x70,0x3C,0xF1,0xCB,0x93,0x85,0x43,0x6F,0x27,0xAC,0xC8,0x2A};

uint32_t AnnounceResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->model_info.read(iprot);
          this->__isset.model_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->params.read(iprot);
          this->__isset.params = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->shard_paths.clear();
            uint32_t _size92;
            ::apache::thrift::protocol::TType _etype95;
            xfer += iprot->readListBegin(_etype95, _size92);
            this->shard_paths.resize(_size92);
            uint32_t _i96;
            for (_i96 = 0; _i96 < _size92; ++_i96)
            {
              xfer += iprot->readString(this->shard_paths[_i96]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.shard_paths = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->learn_rate);
          this->__isset.learn_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AnnounceResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AnnounceResponse");

  xfer += oprot->writeFieldBegin("model_info", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->model_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("params", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->params.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shard_paths", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->shard_paths.size()));
    std::vector<std::string> ::const_iterator _iter97;
    for (_iter97 = this->shard_paths.begin(); _iter97 != this->shard_paths.end(); ++_iter97)
    {
      xfer += oprot->writeString((*_iter97));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("learn_rate", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->learn_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AnnounceResponse &a, AnnounceResponse &b) {
  using ::std::swap;
  swap(a.model_info, b.model_info);
  swap(a.params, b.params);
  swap(a.shard_paths, b.shard_paths);
  swap(a.learn_rate, b.learn_rate);
  swap(a.__isset, b.__isset);
}

const char* HBResponse::ascii_fingerprint = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
const uint8_t HBResponse::binary_fingerprint[16] = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

uint32_t HBResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->completed_shards.clear();
            uint32_t _size98;
            ::apache::thrift::protocol::TType _etype101;
            xfer += iprot->readListBegin(_etype101, _size98);
            this->completed_shards.resize(_size98);
            uint32_t _i102;
            for (_i102 = 0; _i102 < _size98; ++_i102)
            {
              xfer += iprot->readString(this->completed_shards[_i102]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.completed_shards = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HBResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HBResponse");

  xfer += oprot->writeFieldBegin("completed_shards", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->completed_shards.size()));
    std::vector<std::string> ::const_iterator _iter103;
    for (_iter103 = this->completed_shards.begin(); _iter103 != this->completed_shards.end(); ++_iter103)
    {
      xfer += oprot->writeString((*_iter103));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HBResponse &a, HBResponse &b) {
  using ::std::swap;
  swap(a.completed_shards, b.completed_shards);
  swap(a.__isset, b.__isset);
}

const char* StartRequest::ascii_fingerprint = "F96E9B21D37ECC1E6B1D9CC351B177C9";
const uint8_t StartRequest::binary_fingerprint[16] = {0xF9,0x6E,0x9B,0x21,0xD3,0x7E,0xCC,0x1E,0x6B,0x1D,0x9C,0xC3,0x51,0xB1,0x77,0xC9};

uint32_t StartRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->shard_paths.clear();
            uint32_t _size104;
            ::apache::thrift::protocol::TType _etype107;
            xfer += iprot->readListBegin(_etype107, _size104);
            this->shard_paths.resize(_size104);
            uint32_t _i108;
            for (_i108 = 0; _i108 < _size104; ++_i108)
            {
              xfer += iprot->readString(this->shard_paths[_i108]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.shard_paths = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->learn_rate);
          this->__isset.learn_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StartRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StartRequest");

  xfer += oprot->writeFieldBegin("shard_paths", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->shard_paths.size()));
    std::vector<std::string> ::const_iterator _iter109;
    for (_iter109 = this->shard_paths.begin(); _iter109 != this->shard_paths.end(); ++_iter109)
    {
      xfer += oprot->writeString((*_iter109));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("learn_rate", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->learn_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StartRequest &a, StartRequest &b) {
  using ::std::swap;
  swap(a.shard_paths, b.shard_paths);
  swap(a.learn_rate, b.learn_rate);
  swap(a.__isset, b.__isset);
}

} // namespace

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef distrust_TYPES_H
#define distrust_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace distrust {

typedef struct _Status__isset {
  _Status__isset() : leader_id(false), param_server_ids(false) {}
  bool leader_id;
  bool param_server_ids;
} _Status__isset;

class Status {
 public:

  static const char* ascii_fingerprint; // = "ACBC8ECF4940BD768FA35CCD08154770";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xBC,0x8E,0xCF,0x49,0x40,0xBD,0x76,0x8F,0xA3,0x5C,0xCD,0x08,0x15,0x47,0x70};

  Status() : leader_id(0) {
  }

  virtual ~Status() throw() {}

  int32_t leader_id;
  std::vector<int32_t>  param_server_ids;

  _Status__isset __isset;

  void __set_leader_id(const int32_t val) {
    leader_id = val;
  }

  void __set_param_server_ids(const std::vector<int32_t> & val) {
    param_server_ids = val;
  }

  bool operator == (const Status & rhs) const
  {
    if (!(leader_id == rhs.leader_id))
      return false;
    if (!(param_server_ids == rhs.param_server_ids))
      return false;
    return true;
  }
  bool operator != (const Status &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Status & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Status &a, Status &b);

typedef struct _HBRequest__isset {
  _HBRequest__isset() : status(false) {}
  bool status;
} _HBRequest__isset;

class HBRequest {
 public:

  static const char* ascii_fingerprint; // = "14CB0077E1682B2DE4BE78E81E7629A8";
  static const uint8_t binary_fingerprint[16]; // = {0x14,0xCB,0x00,0x77,0xE1,0x68,0x2B,0x2D,0xE4,0xBE,0x78,0xE8,0x1E,0x76,0x29,0xA8};

  HBRequest() {
  }

  virtual ~HBRequest() throw() {}

  Status status;

  _HBRequest__isset __isset;

  void __set_status(const Status& val) {
    status = val;
    __isset.status = true;
  }

  bool operator == (const HBRequest & rhs) const
  {
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const HBRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HBRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HBRequest &a, HBRequest &b);

typedef struct _HBResponse__isset {
  _HBResponse__isset() : worker_id(false) {}
  bool worker_id;
} _HBResponse__isset;

class HBResponse {
 public:

  static const char* ascii_fingerprint; // = "E7A96B151330359E84C0A3AC91BCBACD";
  static const uint8_t binary_fingerprint[16]; // = {0xE7,0xA9,0x6B,0x15,0x13,0x30,0x35,0x9E,0x84,0xC0,0xA3,0xAC,0x91,0xBC,0xBA,0xCD};

  HBResponse() : worker_id(0) {
  }

  virtual ~HBResponse() throw() {}

  int32_t worker_id;

  _HBResponse__isset __isset;

  void __set_worker_id(const int32_t val) {
    worker_id = val;
    __isset.worker_id = true;
  }

  bool operator == (const HBResponse & rhs) const
  {
    if (__isset.worker_id != rhs.__isset.worker_id)
      return false;
    else if (__isset.worker_id && !(worker_id == rhs.worker_id))
      return false;
    return true;
  }
  bool operator != (const HBResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HBResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HBResponse &a, HBResponse &b);

typedef struct _StartRequest__isset {
  _StartRequest__isset() : shard_path(false), learn_rate(false) {}
  bool shard_path;
  bool learn_rate;
} _StartRequest__isset;

class StartRequest {
 public:

  static const char* ascii_fingerprint; // = "C712EF0DA8599E55DF4D0F13415232EF";
  static const uint8_t binary_fingerprint[16]; // = {0xC7,0x12,0xEF,0x0D,0xA8,0x59,0x9E,0x55,0xDF,0x4D,0x0F,0x13,0x41,0x52,0x32,0xEF};

  StartRequest() : shard_path(), learn_rate(0) {
  }

  virtual ~StartRequest() throw() {}

  std::string shard_path;
  double learn_rate;

  _StartRequest__isset __isset;

  void __set_shard_path(const std::string& val) {
    shard_path = val;
  }

  void __set_learn_rate(const double val) {
    learn_rate = val;
  }

  bool operator == (const StartRequest & rhs) const
  {
    if (!(shard_path == rhs.shard_path))
      return false;
    if (!(learn_rate == rhs.learn_rate))
      return false;
    return true;
  }
  bool operator != (const StartRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StartRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StartRequest &a, StartRequest &b);

} // namespace

#endif

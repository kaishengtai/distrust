/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ParamService_H
#define ParamService_H

#include <thrift/TDispatchProcessor.h>
#include "distrust_types.h"

namespace distrust {

class ParamServiceIf {
 public:
  virtual ~ParamServiceIf() {}
  virtual void announce(AnnounceResponse& _return, const AnnounceRequest& request) = 0;
  virtual void push_update(UpdateResponse& _return, const UpdateRequest& request) = 0;
  virtual void pull_params(PullResponse& _return, const PullRequest& request) = 0;
};

class ParamServiceIfFactory {
 public:
  typedef ParamServiceIf Handler;

  virtual ~ParamServiceIfFactory() {}

  virtual ParamServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ParamServiceIf* /* handler */) = 0;
};

class ParamServiceIfSingletonFactory : virtual public ParamServiceIfFactory {
 public:
  ParamServiceIfSingletonFactory(const boost::shared_ptr<ParamServiceIf>& iface) : iface_(iface) {}
  virtual ~ParamServiceIfSingletonFactory() {}

  virtual ParamServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ParamServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ParamServiceIf> iface_;
};

class ParamServiceNull : virtual public ParamServiceIf {
 public:
  virtual ~ParamServiceNull() {}
  void announce(AnnounceResponse& /* _return */, const AnnounceRequest& /* request */) {
    return;
  }
  void push_update(UpdateResponse& /* _return */, const UpdateRequest& /* request */) {
    return;
  }
  void pull_params(PullResponse& /* _return */, const PullRequest& /* request */) {
    return;
  }
};

typedef struct _ParamService_announce_args__isset {
  _ParamService_announce_args__isset() : request(false) {}
  bool request;
} _ParamService_announce_args__isset;

class ParamService_announce_args {
 public:

  ParamService_announce_args() {
  }

  virtual ~ParamService_announce_args() throw() {}

  AnnounceRequest request;

  _ParamService_announce_args__isset __isset;

  void __set_request(const AnnounceRequest& val) {
    request = val;
  }

  bool operator == (const ParamService_announce_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ParamService_announce_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParamService_announce_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParamService_announce_pargs {
 public:


  virtual ~ParamService_announce_pargs() throw() {}

  const AnnounceRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParamService_announce_result__isset {
  _ParamService_announce_result__isset() : success(false) {}
  bool success;
} _ParamService_announce_result__isset;

class ParamService_announce_result {
 public:

  ParamService_announce_result() {
  }

  virtual ~ParamService_announce_result() throw() {}

  AnnounceResponse success;

  _ParamService_announce_result__isset __isset;

  void __set_success(const AnnounceResponse& val) {
    success = val;
  }

  bool operator == (const ParamService_announce_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ParamService_announce_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParamService_announce_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParamService_announce_presult__isset {
  _ParamService_announce_presult__isset() : success(false) {}
  bool success;
} _ParamService_announce_presult__isset;

class ParamService_announce_presult {
 public:


  virtual ~ParamService_announce_presult() throw() {}

  AnnounceResponse* success;

  _ParamService_announce_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ParamService_push_update_args__isset {
  _ParamService_push_update_args__isset() : request(false) {}
  bool request;
} _ParamService_push_update_args__isset;

class ParamService_push_update_args {
 public:

  ParamService_push_update_args() {
  }

  virtual ~ParamService_push_update_args() throw() {}

  UpdateRequest request;

  _ParamService_push_update_args__isset __isset;

  void __set_request(const UpdateRequest& val) {
    request = val;
  }

  bool operator == (const ParamService_push_update_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ParamService_push_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParamService_push_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParamService_push_update_pargs {
 public:


  virtual ~ParamService_push_update_pargs() throw() {}

  const UpdateRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParamService_push_update_result__isset {
  _ParamService_push_update_result__isset() : success(false) {}
  bool success;
} _ParamService_push_update_result__isset;

class ParamService_push_update_result {
 public:

  ParamService_push_update_result() {
  }

  virtual ~ParamService_push_update_result() throw() {}

  UpdateResponse success;

  _ParamService_push_update_result__isset __isset;

  void __set_success(const UpdateResponse& val) {
    success = val;
  }

  bool operator == (const ParamService_push_update_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ParamService_push_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParamService_push_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParamService_push_update_presult__isset {
  _ParamService_push_update_presult__isset() : success(false) {}
  bool success;
} _ParamService_push_update_presult__isset;

class ParamService_push_update_presult {
 public:


  virtual ~ParamService_push_update_presult() throw() {}

  UpdateResponse* success;

  _ParamService_push_update_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ParamService_pull_params_args__isset {
  _ParamService_pull_params_args__isset() : request(false) {}
  bool request;
} _ParamService_pull_params_args__isset;

class ParamService_pull_params_args {
 public:

  ParamService_pull_params_args() {
  }

  virtual ~ParamService_pull_params_args() throw() {}

  PullRequest request;

  _ParamService_pull_params_args__isset __isset;

  void __set_request(const PullRequest& val) {
    request = val;
  }

  bool operator == (const ParamService_pull_params_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ParamService_pull_params_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParamService_pull_params_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ParamService_pull_params_pargs {
 public:


  virtual ~ParamService_pull_params_pargs() throw() {}

  const PullRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParamService_pull_params_result__isset {
  _ParamService_pull_params_result__isset() : success(false) {}
  bool success;
} _ParamService_pull_params_result__isset;

class ParamService_pull_params_result {
 public:

  ParamService_pull_params_result() {
  }

  virtual ~ParamService_pull_params_result() throw() {}

  PullResponse success;

  _ParamService_pull_params_result__isset __isset;

  void __set_success(const PullResponse& val) {
    success = val;
  }

  bool operator == (const ParamService_pull_params_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ParamService_pull_params_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParamService_pull_params_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ParamService_pull_params_presult__isset {
  _ParamService_pull_params_presult__isset() : success(false) {}
  bool success;
} _ParamService_pull_params_presult__isset;

class ParamService_pull_params_presult {
 public:


  virtual ~ParamService_pull_params_presult() throw() {}

  PullResponse* success;

  _ParamService_pull_params_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ParamServiceClient : virtual public ParamServiceIf {
 public:
  ParamServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ParamServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void announce(AnnounceResponse& _return, const AnnounceRequest& request);
  void send_announce(const AnnounceRequest& request);
  void recv_announce(AnnounceResponse& _return);
  void push_update(UpdateResponse& _return, const UpdateRequest& request);
  void send_push_update(const UpdateRequest& request);
  void recv_push_update(UpdateResponse& _return);
  void pull_params(PullResponse& _return, const PullRequest& request);
  void send_pull_params(const PullRequest& request);
  void recv_pull_params(PullResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ParamServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ParamServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ParamServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_announce(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_push_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pull_params(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ParamServiceProcessor(boost::shared_ptr<ParamServiceIf> iface) :
    iface_(iface) {
    processMap_["announce"] = &ParamServiceProcessor::process_announce;
    processMap_["push_update"] = &ParamServiceProcessor::process_push_update;
    processMap_["pull_params"] = &ParamServiceProcessor::process_pull_params;
  }

  virtual ~ParamServiceProcessor() {}
};

class ParamServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ParamServiceProcessorFactory(const ::boost::shared_ptr< ParamServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ParamServiceIfFactory > handlerFactory_;
};

class ParamServiceMultiface : virtual public ParamServiceIf {
 public:
  ParamServiceMultiface(std::vector<boost::shared_ptr<ParamServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ParamServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ParamServiceIf> > ifaces_;
  ParamServiceMultiface() {}
  void add(boost::shared_ptr<ParamServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void announce(AnnounceResponse& _return, const AnnounceRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->announce(_return, request);
    }
    ifaces_[i]->announce(_return, request);
    return;
  }

  void push_update(UpdateResponse& _return, const UpdateRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->push_update(_return, request);
    }
    ifaces_[i]->push_update(_return, request);
    return;
  }

  void pull_params(PullResponse& _return, const PullRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pull_params(_return, request);
    }
    ifaces_[i]->pull_params(_return, request);
    return;
  }

};

} // namespace

#endif

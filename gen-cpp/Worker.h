/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Worker_H
#define Worker_H

#include <thrift/TDispatchProcessor.h>
#include "distrust_types.h"

namespace distrust {

class WorkerIf {
 public:
  virtual ~WorkerIf() {}
  virtual void heartbeat(HBResponse& _return, const HBRequest& request) = 0;
  virtual void start(const StartRequest& request) = 0;
  virtual void stop() = 0;
};

class WorkerIfFactory {
 public:
  typedef WorkerIf Handler;

  virtual ~WorkerIfFactory() {}

  virtual WorkerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(WorkerIf* /* handler */) = 0;
};

class WorkerIfSingletonFactory : virtual public WorkerIfFactory {
 public:
  WorkerIfSingletonFactory(const boost::shared_ptr<WorkerIf>& iface) : iface_(iface) {}
  virtual ~WorkerIfSingletonFactory() {}

  virtual WorkerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(WorkerIf* /* handler */) {}

 protected:
  boost::shared_ptr<WorkerIf> iface_;
};

class WorkerNull : virtual public WorkerIf {
 public:
  virtual ~WorkerNull() {}
  void heartbeat(HBResponse& /* _return */, const HBRequest& /* request */) {
    return;
  }
  void start(const StartRequest& /* request */) {
    return;
  }
  void stop() {
    return;
  }
};

typedef struct _Worker_heartbeat_args__isset {
  _Worker_heartbeat_args__isset() : request(false) {}
  bool request;
} _Worker_heartbeat_args__isset;

class Worker_heartbeat_args {
 public:

  Worker_heartbeat_args() {
  }

  virtual ~Worker_heartbeat_args() throw() {}

  HBRequest request;

  _Worker_heartbeat_args__isset __isset;

  void __set_request(const HBRequest& val) {
    request = val;
  }

  bool operator == (const Worker_heartbeat_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Worker_heartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_heartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_heartbeat_pargs {
 public:


  virtual ~Worker_heartbeat_pargs() throw() {}

  const HBRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_heartbeat_result__isset {
  _Worker_heartbeat_result__isset() : success(false) {}
  bool success;
} _Worker_heartbeat_result__isset;

class Worker_heartbeat_result {
 public:

  Worker_heartbeat_result() {
  }

  virtual ~Worker_heartbeat_result() throw() {}

  HBResponse success;

  _Worker_heartbeat_result__isset __isset;

  void __set_success(const HBResponse& val) {
    success = val;
  }

  bool operator == (const Worker_heartbeat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Worker_heartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_heartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Worker_heartbeat_presult__isset {
  _Worker_heartbeat_presult__isset() : success(false) {}
  bool success;
} _Worker_heartbeat_presult__isset;

class Worker_heartbeat_presult {
 public:


  virtual ~Worker_heartbeat_presult() throw() {}

  HBResponse* success;

  _Worker_heartbeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Worker_start_args__isset {
  _Worker_start_args__isset() : request(false) {}
  bool request;
} _Worker_start_args__isset;

class Worker_start_args {
 public:

  Worker_start_args() {
  }

  virtual ~Worker_start_args() throw() {}

  StartRequest request;

  _Worker_start_args__isset __isset;

  void __set_request(const StartRequest& val) {
    request = val;
  }

  bool operator == (const Worker_start_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Worker_start_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_start_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_start_pargs {
 public:


  virtual ~Worker_start_pargs() throw() {}

  const StartRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_start_result {
 public:

  Worker_start_result() {
  }

  virtual ~Worker_start_result() throw() {}


  bool operator == (const Worker_start_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Worker_start_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_start_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_start_presult {
 public:


  virtual ~Worker_start_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Worker_stop_args {
 public:

  Worker_stop_args() {
  }

  virtual ~Worker_stop_args() throw() {}


  bool operator == (const Worker_stop_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Worker_stop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_stop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_stop_pargs {
 public:


  virtual ~Worker_stop_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_stop_result {
 public:

  Worker_stop_result() {
  }

  virtual ~Worker_stop_result() throw() {}


  bool operator == (const Worker_stop_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Worker_stop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker_stop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Worker_stop_presult {
 public:


  virtual ~Worker_stop_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class WorkerClient : virtual public WorkerIf {
 public:
  WorkerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  WorkerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void heartbeat(HBResponse& _return, const HBRequest& request);
  void send_heartbeat(const HBRequest& request);
  void recv_heartbeat(HBResponse& _return);
  void start(const StartRequest& request);
  void send_start(const StartRequest& request);
  void recv_start();
  void stop();
  void send_stop();
  void recv_stop();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class WorkerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<WorkerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (WorkerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_heartbeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  WorkerProcessor(boost::shared_ptr<WorkerIf> iface) :
    iface_(iface) {
    processMap_["heartbeat"] = &WorkerProcessor::process_heartbeat;
    processMap_["start"] = &WorkerProcessor::process_start;
    processMap_["stop"] = &WorkerProcessor::process_stop;
  }

  virtual ~WorkerProcessor() {}
};

class WorkerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  WorkerProcessorFactory(const ::boost::shared_ptr< WorkerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< WorkerIfFactory > handlerFactory_;
};

class WorkerMultiface : virtual public WorkerIf {
 public:
  WorkerMultiface(std::vector<boost::shared_ptr<WorkerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~WorkerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<WorkerIf> > ifaces_;
  WorkerMultiface() {}
  void add(boost::shared_ptr<WorkerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void heartbeat(HBResponse& _return, const HBRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->heartbeat(_return, request);
    }
    ifaces_[i]->heartbeat(_return, request);
    return;
  }

  void start(const StartRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start(request);
    }
    ifaces_[i]->start(request);
  }

  void stop() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stop();
    }
    ifaces_[i]->stop();
  }

};

} // namespace

#endif

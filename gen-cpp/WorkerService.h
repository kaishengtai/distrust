/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef WorkerService_H
#define WorkerService_H

#include <thrift/TDispatchProcessor.h>
#include "distrust_types.h"

namespace distrust {

class WorkerServiceIf {
 public:
  virtual ~WorkerServiceIf() {}
  virtual void heartbeat(HBResponse& _return) = 0;
  virtual void start(const StartRequest& request) = 0;
  virtual void stop() = 0;
  virtual void reassign(const std::vector<std::string> & shard_paths) = 0;
};

class WorkerServiceIfFactory {
 public:
  typedef WorkerServiceIf Handler;

  virtual ~WorkerServiceIfFactory() {}

  virtual WorkerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(WorkerServiceIf* /* handler */) = 0;
};

class WorkerServiceIfSingletonFactory : virtual public WorkerServiceIfFactory {
 public:
  WorkerServiceIfSingletonFactory(const boost::shared_ptr<WorkerServiceIf>& iface) : iface_(iface) {}
  virtual ~WorkerServiceIfSingletonFactory() {}

  virtual WorkerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(WorkerServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<WorkerServiceIf> iface_;
};

class WorkerServiceNull : virtual public WorkerServiceIf {
 public:
  virtual ~WorkerServiceNull() {}
  void heartbeat(HBResponse& /* _return */) {
    return;
  }
  void start(const StartRequest& /* request */) {
    return;
  }
  void stop() {
    return;
  }
  void reassign(const std::vector<std::string> & /* shard_paths */) {
    return;
  }
};


class WorkerService_heartbeat_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  WorkerService_heartbeat_args(const WorkerService_heartbeat_args&);
  WorkerService_heartbeat_args& operator=(const WorkerService_heartbeat_args&);
  WorkerService_heartbeat_args() {
  }

  virtual ~WorkerService_heartbeat_args() throw();

  bool operator == (const WorkerService_heartbeat_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WorkerService_heartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkerService_heartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WorkerService_heartbeat_args& obj);
};


class WorkerService_heartbeat_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~WorkerService_heartbeat_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WorkerService_heartbeat_pargs& obj);
};

typedef struct _WorkerService_heartbeat_result__isset {
  _WorkerService_heartbeat_result__isset() : success(false) {}
  bool success :1;
} _WorkerService_heartbeat_result__isset;

class WorkerService_heartbeat_result {
 public:

  static const char* ascii_fingerprint; // = "ABCF3484348E62CDDFBCE0E927E60DA5";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0xCF,0x34,0x84,0x34,0x8E,0x62,0xCD,0xDF,0xBC,0xE0,0xE9,0x27,0xE6,0x0D,0xA5};

  WorkerService_heartbeat_result(const WorkerService_heartbeat_result&);
  WorkerService_heartbeat_result& operator=(const WorkerService_heartbeat_result&);
  WorkerService_heartbeat_result() {
  }

  virtual ~WorkerService_heartbeat_result() throw();
  HBResponse success;

  _WorkerService_heartbeat_result__isset __isset;

  void __set_success(const HBResponse& val);

  bool operator == (const WorkerService_heartbeat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WorkerService_heartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkerService_heartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WorkerService_heartbeat_result& obj);
};

typedef struct _WorkerService_heartbeat_presult__isset {
  _WorkerService_heartbeat_presult__isset() : success(false) {}
  bool success :1;
} _WorkerService_heartbeat_presult__isset;

class WorkerService_heartbeat_presult {
 public:

  static const char* ascii_fingerprint; // = "ABCF3484348E62CDDFBCE0E927E60DA5";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0xCF,0x34,0x84,0x34,0x8E,0x62,0xCD,0xDF,0xBC,0xE0,0xE9,0x27,0xE6,0x0D,0xA5};


  virtual ~WorkerService_heartbeat_presult() throw();
  HBResponse* success;

  _WorkerService_heartbeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const WorkerService_heartbeat_presult& obj);
};

typedef struct _WorkerService_start_args__isset {
  _WorkerService_start_args__isset() : request(false) {}
  bool request :1;
} _WorkerService_start_args__isset;

class WorkerService_start_args {
 public:

  static const char* ascii_fingerprint; // = "3E067387AFE9C644DBF26F8C61C88381";
  static const uint8_t binary_fingerprint[16]; // = {0x3E,0x06,0x73,0x87,0xAF,0xE9,0xC6,0x44,0xDB,0xF2,0x6F,0x8C,0x61,0xC8,0x83,0x81};

  WorkerService_start_args(const WorkerService_start_args&);
  WorkerService_start_args& operator=(const WorkerService_start_args&);
  WorkerService_start_args() {
  }

  virtual ~WorkerService_start_args() throw();
  StartRequest request;

  _WorkerService_start_args__isset __isset;

  void __set_request(const StartRequest& val);

  bool operator == (const WorkerService_start_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const WorkerService_start_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkerService_start_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WorkerService_start_args& obj);
};


class WorkerService_start_pargs {
 public:

  static const char* ascii_fingerprint; // = "3E067387AFE9C644DBF26F8C61C88381";
  static const uint8_t binary_fingerprint[16]; // = {0x3E,0x06,0x73,0x87,0xAF,0xE9,0xC6,0x44,0xDB,0xF2,0x6F,0x8C,0x61,0xC8,0x83,0x81};


  virtual ~WorkerService_start_pargs() throw();
  const StartRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WorkerService_start_pargs& obj);
};


class WorkerService_start_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  WorkerService_start_result(const WorkerService_start_result&);
  WorkerService_start_result& operator=(const WorkerService_start_result&);
  WorkerService_start_result() {
  }

  virtual ~WorkerService_start_result() throw();

  bool operator == (const WorkerService_start_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WorkerService_start_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkerService_start_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WorkerService_start_result& obj);
};


class WorkerService_start_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~WorkerService_start_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const WorkerService_start_presult& obj);
};


class WorkerService_stop_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  WorkerService_stop_args(const WorkerService_stop_args&);
  WorkerService_stop_args& operator=(const WorkerService_stop_args&);
  WorkerService_stop_args() {
  }

  virtual ~WorkerService_stop_args() throw();

  bool operator == (const WorkerService_stop_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WorkerService_stop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkerService_stop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WorkerService_stop_args& obj);
};


class WorkerService_stop_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~WorkerService_stop_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WorkerService_stop_pargs& obj);
};


class WorkerService_stop_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  WorkerService_stop_result(const WorkerService_stop_result&);
  WorkerService_stop_result& operator=(const WorkerService_stop_result&);
  WorkerService_stop_result() {
  }

  virtual ~WorkerService_stop_result() throw();

  bool operator == (const WorkerService_stop_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WorkerService_stop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkerService_stop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WorkerService_stop_result& obj);
};


class WorkerService_stop_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~WorkerService_stop_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const WorkerService_stop_presult& obj);
};

typedef struct _WorkerService_reassign_args__isset {
  _WorkerService_reassign_args__isset() : shard_paths(false) {}
  bool shard_paths :1;
} _WorkerService_reassign_args__isset;

class WorkerService_reassign_args {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

  WorkerService_reassign_args(const WorkerService_reassign_args&);
  WorkerService_reassign_args& operator=(const WorkerService_reassign_args&);
  WorkerService_reassign_args() {
  }

  virtual ~WorkerService_reassign_args() throw();
  std::vector<std::string>  shard_paths;

  _WorkerService_reassign_args__isset __isset;

  void __set_shard_paths(const std::vector<std::string> & val);

  bool operator == (const WorkerService_reassign_args & rhs) const
  {
    if (!(shard_paths == rhs.shard_paths))
      return false;
    return true;
  }
  bool operator != (const WorkerService_reassign_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkerService_reassign_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WorkerService_reassign_args& obj);
};


class WorkerService_reassign_pargs {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};


  virtual ~WorkerService_reassign_pargs() throw();
  const std::vector<std::string> * shard_paths;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WorkerService_reassign_pargs& obj);
};


class WorkerService_reassign_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  WorkerService_reassign_result(const WorkerService_reassign_result&);
  WorkerService_reassign_result& operator=(const WorkerService_reassign_result&);
  WorkerService_reassign_result() {
  }

  virtual ~WorkerService_reassign_result() throw();

  bool operator == (const WorkerService_reassign_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WorkerService_reassign_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkerService_reassign_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const WorkerService_reassign_result& obj);
};


class WorkerService_reassign_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~WorkerService_reassign_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const WorkerService_reassign_presult& obj);
};

class WorkerServiceClient : virtual public WorkerServiceIf {
 public:
  WorkerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  WorkerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void heartbeat(HBResponse& _return);
  void send_heartbeat();
  void recv_heartbeat(HBResponse& _return);
  void start(const StartRequest& request);
  void send_start(const StartRequest& request);
  void recv_start();
  void stop();
  void send_stop();
  void recv_stop();
  void reassign(const std::vector<std::string> & shard_paths);
  void send_reassign(const std::vector<std::string> & shard_paths);
  void recv_reassign();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class WorkerServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<WorkerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (WorkerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_heartbeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reassign(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  WorkerServiceProcessor(boost::shared_ptr<WorkerServiceIf> iface) :
    iface_(iface) {
    processMap_["heartbeat"] = &WorkerServiceProcessor::process_heartbeat;
    processMap_["start"] = &WorkerServiceProcessor::process_start;
    processMap_["stop"] = &WorkerServiceProcessor::process_stop;
    processMap_["reassign"] = &WorkerServiceProcessor::process_reassign;
  }

  virtual ~WorkerServiceProcessor() {}
};

class WorkerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  WorkerServiceProcessorFactory(const ::boost::shared_ptr< WorkerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< WorkerServiceIfFactory > handlerFactory_;
};

class WorkerServiceMultiface : virtual public WorkerServiceIf {
 public:
  WorkerServiceMultiface(std::vector<boost::shared_ptr<WorkerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~WorkerServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<WorkerServiceIf> > ifaces_;
  WorkerServiceMultiface() {}
  void add(boost::shared_ptr<WorkerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void heartbeat(HBResponse& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->heartbeat(_return);
    }
    ifaces_[i]->heartbeat(_return);
    return;
  }

  void start(const StartRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start(request);
    }
    ifaces_[i]->start(request);
  }

  void stop() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stop();
    }
    ifaces_[i]->stop();
  }

  void reassign(const std::vector<std::string> & shard_paths) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reassign(shard_paths);
    }
    ifaces_[i]->reassign(shard_paths);
  }

};

} // namespace

#endif
